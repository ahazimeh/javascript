higher order function:
a fn that receives another fn as an argument, that returns a new function, or both
first class fn:
first class functions means that all functions are values, so it is just a concept

fn.name to get the name of a fn

call and apply methods:
to set the this keyword
book.call(swiss, 583, 'Marry Cooper');// so this will be set to swiss
similarly for apply but it takes an array rather than a lot of args
book.apply(swiss, [583, 'Marry Cooper']);

// Bind is better because it returns a new function that is bind to certain object
const bookEW = book.bind(eurowings);
and we can also set parameters
const bookEW23 = book.bind(eurowings,23) // so when we use bookWE23 the first param will be set automatically to 23
this is called partial application (a part of the arguments of the original function are already applied)

when using callback function the this keyword points to the original function

Immediately Invoked Function Expressions (IIFE):
(function () {
  console.log('This will never run again');
})();
this can be used to keep variables declared private
but we can also use a code block
{
  const private = 23;
}

// Closures
a closure makes a function remember all the variables that existed at the function birthplace
const secureBooking = function () {
  let passengerCount = 0;

  return function () {
    passengerCount++;
    console.log(`${passengerCount} passengers`);
  };
};

const booker = secureBooking();

booker();
booker();
booker();
// so a funcion always has access to the variables environment of the execution context in which it was created event after that execution context is gone
we can say that the booker function closed over its parent scope or over its parent environment including all function arguments
and note that the closure have priority over the scope chain
so if the same variable exists in the scope chain and the closure, the function will use the closure variable

CLOSURES SUMMARY
A closure is the closed-over variable environment of the execution context in which a function was created, even after that
execution context is gone;
Less formal
A closure gives a function access to all the variables of its parent function, even after that parent function has returned. The
function keeps a reference to its outer scope, which preserves the scope chain throughout time.
â†“Less formal
A closure makes sure that a function doesn't loose connection to variables that existed at the function's birth place;
Less formal
Function Connection Parent scope Variables
A closure is like a backpack that a function carries around wherever it goes. This backpack has all the variables that were
present in the environment where the function was created.
[[Scopes]] these double brackets means it is an internal property that we can't access from our code