js is a high-level prototype-based object-oriented multi-paradigm interpreted or just-in-time programming language with first-class functions and non-blocking event loop concurrency model

human readable code to machine code: compiling or interpreting
paradigm: An approach and mindset of structuring code, which will direct your coding style and technique:
popular paradigm:
    procedural programming
    oop
    functional programming(FP)
js does all of the above

object oriented nature of js it is a prototype based object oriented approach, almost everything in js is an object except for premetive values

js is a language with first class fn which means that fns are treated as regular values

dynamic language: we don't assign types to variables

concurrency model: how js engine handles multiple tasks at the same time
js runs in one single thread and therefore we need a way of handling multiple things happening at the same time
event loop takes long running tasks and executes them in the background

js engine is a program that executes a js code
js contains a call stack and a heap,
call stack is where our code is executed using execution context
heap is an unstructured memory pool which stores all the objects that our application needs

compilation vs interpretation
in compilation the entire source code is converted into machine code at once and this machine code is written into a portable file that can be exececuted on any computer

interpretation is where code is read and exececuted line by line
ofcourse the source code needs to be converted to machine coded but it happens write before it is executed and not a head of time

js is used to be an interpreted language but it is much much slower but now with modern js, js engines use a mix between compilation and interpretation(just-in-time compilation)
just-in-time compilation: compiles the entire code into machine code at once and then executes it write away

code will be parsed to ast then compiled to machine code and then it gets executed

first js engine will produce an unoptimized version of the code so it starts fast and keep optimizing the code in the background

js in node js doesn't have web apis but it uses c++ bindings & thread pool

global execution context is created for top level code
in the beginning only the code that is outside fns will be executed
there is always 1 global execution context
what is inside execution context
    variables
        let, const and var declaration
        functions
        arguments object
    scope chain
    this keyword
this is generated in creation phase
execution context belonging to arrow functions do not get argument keywords nor this keyword

Scoping: How our program's variables are organized and accessed. "Where do variables
live?" or "Where can we access a certain variable, and where not?",
Lexical scoping: Scoping is controlled by placement of functions and blocks in the
Scope: Space or environment in which a certain variable is declared (variable
environment in case of functions). There is global scope, function scope, and block scope
Scope of a variable: Begion of our code where a certain variable can be accessed.
but I like to define all these concepts that we have here

Global Scope: top level code
Function Scope:
Block Scope (ES6): everything between {}, applies only for let and const variables where var only care about functions
starting from ES6 all functions are block scoped, at least in strict mode

variable lookup: scopes lookup in the scope chain untill they find the variable that they need

by the rule of lexical scoping sibling scopes don't have access to each others' variables

Hoisting: Makes some types of variables accessible/usable in the code before they are actually declared. "Variables lifted to the top of their scope".
BEHIND THE SCENES
Before execution, code is scanned for variable declarations, and for each variable, a new property is created in the variable environment object.

temporal dead zone is in a region where the variable is defined and can't be used, it is between the beginning of the scope and the defining of the variable

hoisting was implemented so we can use function declarations before we use them, this is essential for some programming techniques such as mutual recursion
it works for var declaration becuase that was the only way hoisting could be implemented at the time

calling this in a top level function will point to windows we are not using strict mode, otherwise it will be undefined

never use an arrow fn as a method because the this keyword will act in a weird way


arguments keyword is to get the arguments inside a fn but it doesn't exist in an arrow fn

objects are stored in the memory heap where primitives or primitive types are stored in the call stack(they are stored in the execution context in which they are declared)

to copy an object without the reference
    const jessicaCopy = Object.assign({}, jessica2)
    but the problem here is that inner object will still the same for both objects
    so Object.assign will make a shallow copy and not a deep clone