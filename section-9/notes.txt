// Mutating variables
let a = 111;
let b = 999;
const obj = { a: 23, b: 7, c: 14 };
({ a, b } = obj);

// Nested objects
const {
  fri: { open: o, close: c },
} = openingHours;
console.log(o, c);

the spread operator works on all iterables (arrays, strings, maps, or sets but not objects)
we can only use the spread operator when building an array or when we pass values into a function

Rest Pattern (we compress)
const [a, b, ...others] = [1, 2, 3, 4, 5];
console.log(a, b, others); // others will be [3,4,5]

const {sat, ...weekdays} = restaurant.openingHours


// 2) Functions
const add = function (...numbers) {
  let sum = 0;
  for (let i = 0; i < numbers.length; i++) sum += numbers[i];
  console.log(sum);
};

add(2, 3);
add(5, 3, 7, 2);
add(8, 2, 5, 3, 2, 1, 4);

const x = [23, 5, 7];
add(...x);

// USE ANY data type, return ANY data type, short-circuiting
console.log(3 || 'Jonas');
ex: below 'Hello' will short circuit the entire operation
console.log(undefined || 0 || '' || 'Hello' || 23 || null);

ES2020 operator
The Nullish Coalescing Operator (??), nullish values are null and undefined
const guestsCorrect = restaurant.numGuests ?? 10;
here only nullish values will short-circuit the evaluation

ES2021 Logical OR Assignment Operators
rest1.numGuests = rest1.numGuests || 10;
rest1.numGuests ||= 10;
Logical Nullish Assignment Operator
rest1.numGuests ??= 10;

we also have Logical AND Assignment Operators
it assigns a value to a variable if it is truthy only
so if it would return undefined nothing will be returned

rest1.owner = rest1.owner && '<ANONYMOUS>';
rest1.owner &&= '<ANONYMOUS>';
so the first example above will return undefined to the object because rest1.owner is undefined whereas the second will return nothing

forof loop
for (const item of menu) console.log(item);

to get access to the index as well
for (const item of menu.entries()) {
  console.log(item);
}
console.log(...menu.entries());

for (const [i, el] of menu.entries()) {
  console.log(`${i + 1}: ${el}`);
}

Enhanced Object Literal
rather than openingHours:openingHours, openingHours
rather than order: function(){}, order(){}
[weekdays[3]]: {} // so we can calculate the property names this way

optional chaining: es2020
with methods:
console.log(restaurant.order?.(0, 1) ?? 'Method does not exist');


const properties = Object.keys(openingHours);
const values = Object.values(openingHours);
const entries = Object.entries(openingHours);

// Sets
const stuffUnique = [...new Set(staff)];

// Map
new Map([[key, value],[key, value]])
// Convert object to map
console.log(Object.entries(openingHours));
const hoursMap = new Map(Object.entries(openingHours));
console.log(hoursMap);

// which data structure to use?
simple list of value -> arrays or sets
key/value pairs -> objects or maps
other built in: weekmap and weekset

// arrays vs sets
arrays when you need to store values and these values might contain duplicates, and when you need to manipulate data cuz there are tons of useful array methods
set when you are working with unique values, and when high performance is really important, because operations like searching for an item or deleting an item from a set can be up to 10 times faster in sets than in array, another use case is to remove duplicate values from an array

// objects vs maps
objects has couple of technical disadvantages, maps offer better performance
map keys can have any data type and also easy to iterate and to compute the size of the map
objects are easy to write them and access data
so you should use maps to map keys to values and also when you need keys that are not strings
if you need functions as values then you should use an object for that
and when working with json data you will use objects unless you want to convert the objects to maps

// Strings
whenever we call a method on a string, js behind the scenes will convert the string primitive to object with the same content, and then on that object where the method is called, this is called boxing it takes our string and puts it into a box which is the object
new String()
and when the operation is done the object is converted back to regular string primitive, all string methods return primitives
slice, indexOf, lastIndexOf